# Configuration of the router's HTTP server
# Default configuration for container
supergraph:
  # The socket address and port to listen on
  listen: '0.0.0.0:${env.PORT:-4000}'
  introspection: true

# For demo purposes - can remove or enable homepage
sandbox:
  enabled: true

homepage:
  enabled: false

cors:
  allow_any_origin: true

# This would make debugging easier, but should be a per subgraph basis for production
include_subgraph_errors:
  all: true

plugins:
  experimental.expose_query_plan: true

headers:
  all:
    request:
      - propagate:
          matching: '.*'

demand_control:
  enabled: true
  # Use measure mode to monitor the costs of your operations without rejecting any.
  mode: measure

  strategy:
    # Static estimated strategy has a fixed cost for elements.
    static_estimated:
      # The assumed returned list size for operations. Set this to the maximum number of items in a GraphQL list
      list_size: 10
      # The maximum cost of a single operation, above which the operation is rejected.
      max: 250

telemetry:
  apollo:
    field_level_instrumentation_sampler: 1
    # experimental_otlp_tracing_sampler: always_on # not allowed in 2.0-preview.1
  instrumentation:
    events:
      supergraph:
        COST_CALCULATION:
          message: 'cost calculation'
          on: event_response
          level: info
          attributes:
            graphql.operation.name: true
            cost.estimated: true
            cost.delta: true
            cost.actual: true
            cost.result: true
    spans:
      mode: 'spec_compliant'
      supergraph:
        attributes:
          cost.estimated: true
    # Basic instrumentation
    instruments:
      default_requirement_level: recommended
      supergraph:
        cost.actual: # true # The actual cost
          attributes:
            cost.result: true # Of the estimated costs which of these would have been rejected
            graphql.operation.name: true
        cost.estimated: # The estimated cost
          attributes:
            cost.result: true # Of the estimated costs which of these would have been rejected
            graphql.operation.name: true
        cost.delta: true # Actual - estimated
        # custom instrument
        cost.rejected.operations:
          type: histogram
          value:
            # Estimated cost is used to populate the histogram
            cost: estimated
          description: 'Estimated cost per rejected operation.'
          unit: delta
          # condition:
          #  eq:
          #    # Only show rejected operations.
          #    - cost: result
          #    - 'COST_ESTIMATED_TOO_EXPENSIVE'
          attributes:
            cost.result: true
            graphql.operation.name: true

  exporters:
    tracing:
      common:
        service_name: 'demo'
        sampler: 1.0 # enable this for Studio OTEL spans
      otlp:
        enabled: true
        # Endpoint for your region.
        endpoint: https://otlp.eu01.nr-data.net
        protocol: grpc
        grpc:
          metadata:
            'api-key':
              - eu01xx9c3c76a68efb2a90b3b93863d0FFFFNRAL
    metrics:
      common:
        service_name: 'demo'
        views:
          # Define a custom view because cost is different than the default latency-oriented view of OpenTelemetry
          - name: cost.*
            aggregation:
              histogram:
                buckets:
                  - 0
                  - 10
                  - 100
                  - 150
                  - 200
                  - 250
                  - 300
      otlp:
        enabled: true
        # Endpoint for your region.
        endpoint: https://otlp.eu01.nr-data.net
        protocol: grpc
        grpc:
          metadata:
            'api-key':
              - eu01xx9c3c76a68efb2a90b3b93863d0FFFFNRAL
